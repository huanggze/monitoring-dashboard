apiVersion: monitoring.kubesphere.io/v1alpha2
kind: Dashboard
metadata:
  name: mysql-overview-rev5
  namespace: default
spec:
  annotations:
  - datasource: -- Grafana --
    enable: true
    iconColor: '#e0752d'
    name: PMM Annotations
    tags:
    - pmm_annotation
    type: tags
  auto_refresh: 1m
  editable: true
  panels:
  - colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    datasource: ${DS_PROMETHEUS}
    decimals: 1
    description: |-
      **MySQL Uptime**

      The amount of time since the last restart of the MySQL server process.
    format: s
    gauge:
      maxValue: 100
      thresholdMarkers: true
    height: 125px
    id: 12
    targets:
    - expr: mysql_global_status_uptime
      refId: 1
      step: 1m
    title: MySQL Uptime
    type: singlestat
    valueName: current
  - colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: "**Current QPS**\n\nBased on the queries reported by MySQL's ``SHOW
      STATUS`` command, it is the number of statements executed by the server within
      the last second. This variable includes statements executed within stored programs,
      unlike the Questions variable. It does not count \n``COM_PING`` or ``COM_STATISTICS``
      commands."
    format: short
    gauge:
      maxValue: 100
      thresholdMarkers: true
    height: 125px
    id: 13
    sparkline: bottom
    targets:
    - expr: rate(mysql_global_status_queries[3m]) or irate(mysql_global_status_queries[5m])
      refId: 1
      step: 1m
    title: Current QPS
    type: singlestat
    valueName: current
  - colors:
    - rgba(50, 172, 45, 0.97)
    - rgba(237, 129, 40, 0.89)
    - rgba(245, 54, 54, 0.9)
    datasource: ${DS_PROMETHEUS}
    decimals: 0
    description: |-
      **InnoDB Buffer Pool Size**

      InnoDB maintains a storage area called the buffer pool for caching data and indexes in memory.  Knowing how the InnoDB buffer pool works, and taking advantage of it to keep frequently accessed data in memory, is one of the most important aspects of MySQL tuning. The goal is to keep the working set in memory. In most cases, this should be between 60%-90% of available memory on a dedicated database host, but depends on many factors.
    format: bytes
    gauge:
      maxValue: 100
      thresholdMarkers: true
    height: 125px
    id: 51
    targets:
    - expr: mysql_global_variables_innodb_buffer_pool_size
      refId: 1
      step: 1m
    title: InnoDB Buffer Pool Size
    type: singlestat
    valueName: current
  - colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    datasource: ${DS_PROMETHEUS}
    decimals: 0
    description: |-
      **InnoDB Buffer Pool Size % of Total RAM**

      InnoDB maintains a storage area called the buffer pool for caching data and indexes in memory.  Knowing how the InnoDB buffer pool works, and taking advantage of it to keep frequently accessed data in memory, is one of the most important aspects of MySQL tuning. The goal is to keep the working set in memory. In most cases, this should be between 60%-90% of available memory on a dedicated database host, but depends on many factors.
    format: percent
    gauge:
      maxValue: 100
      thresholdMarkers: true
    height: 125px
    id: 52
    sparkline: bottom
    targets:
    - expr: (mysql_global_variables_innodb_buffer_pool_size * 100) / on (instance)
        node_memory_MemTotal_bytes
      refId: 1
      step: 1m
    title: Buffer Pool Size of Total RAM
    type: singlestat
    valueName: current
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 0
    description: "**Max Connections** \n\nMax Connections is the maximum permitted
      number of simultaneous client connections. By default, this is 151. Increasing
      this value increases the number of file descriptors that mysqld requires. If
      the required number of descriptors are not available, the server reduces the
      value of Max Connections.\n\nmysqld actually permits Max Connections + 1 clients
      to connect. The extra connection is reserved for use by accounts that have the
      SUPER privilege, such as root.\n\nMax Used Connections is the maximum number
      of connections that have been in use simultaneously since the server started.\n\nConnections
      is the number of connection attempts (successful or not) to the MySQL server."
    height: 250px
    id: 92
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: max(max_over_time(mysql_global_status_threads_connected[3m])  or mysql_global_status_threads_connected
        )
      legendFormat: Connections
      refId: 1
      step: 1m
    - expr: mysql_global_status_max_used_connections
      legendFormat: Max Used Connections
      refId: 2
      step: 1m
    - expr: mysql_global_variables_max_connections
      legendFormat: Max Connections
      refId: 3
      step: 1m
    title: MySQL Connections
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Active Threads**

      Threads Connected is the number of open connections, while Threads Running is the number of threads not sleeping.
    id: 10
    legend:
    - as_table
    - min
    - max
    - avg
    - current
    lines: true
    targets:
    - expr: |-
        max_over_time(mysql_global_status_threads_connected[3m]) or
        max_over_time(mysql_global_status_threads_connected[5m])
      legendFormat: Peak Threads Connected
      refId: 1
      step: 1m
    - expr: |-
        max_over_time(mysql_global_status_threads_running[3m]) or
        max_over_time(mysql_global_status_threads_running[5m])
      legendFormat: Peak Threads Running
      refId: 2
      step: 1m
    - expr: "avg_over_time(mysql_global_status_threads_running[3m]) or \navg_over_time(mysql_global_status_threads_running[5m])"
      legendFormat: Avg Threads Running
      refId: 3
      step: 1m
    title: MySQL Client Thread Activity
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    description: "**MySQL Questions**\n\nThe number of statements executed by the
      server. This includes only statements sent to the server by clients and not
      statements executed within stored programs, unlike the Queries used in the QPS
      calculation. \n\nThis variable does not count the following commands:\n* ``COM_PING``\n*
      ``COM_STATISTICS``\n* ``COM_STMT_PREPARE``\n* ``COM_STMT_CLOSE``\n* ``COM_STMT_RESET``"
    id: 53
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_questions[3m]) or irate(mysql_global_status_questions[5m])
      legendFormat: Questions
      refId: 1
      step: 1m
    title: MySQL Questions
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Thread Cache**

      The thread_cache_size variable sets how many threads the server should cache to reuse. When a client disconnects, the client's threads are put in the cache if the cache is not full. It is autosized in MySQL 5.6.8 and above (capped to 100). Requests for threads are satisfied by reusing threads taken from the cache if possible, and only when the cache is empty is a new thread created.

      * *Threads_created*: The number of threads created to handle connections.
      * *Threads_cached*: The number of threads in the thread cache.
    id: 11
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: mysql_global_variables_thread_cache_size
      legendFormat: Thread Cache Size
      refId: 1
      step: 1m
    - expr: mysql_global_status_threads_cached
      legendFormat: Threads Cached
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_threads_created[3m]) or irate(mysql_global_status_threads_created[5m])
      legendFormat: Threads Created
      refId: 3
      step: 1m
    title: MySQL Thread Cache
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    id: 22
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_created_tmp_tables[3m]) or irate(mysql_global_status_created_tmp_tables[5m])
      legendFormat: Created Tmp Tables
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_created_tmp_disk_tables[3m]) or irate(mysql_global_status_created_tmp_disk_tables[5m])
      legendFormat: Created Tmp Disk Tables
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_created_tmp_files[3m]) or irate(mysql_global_status_created_tmp_files[5m])
      legendFormat: Created Tmp Files
      refId: 3
      step: 1m
    title: MySQL Temporary Objects
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Select Types**

      As with most relational databases, selecting based on indexes is more efficient than scanning an entire table's data. Here we see the counters for selects not done with indexes.

      * ***Select Scan*** is how many queries caused full table scans, in which all the data in the table had to be read and either discarded or returned.
      * ***Select Range*** is how many queries used a range scan, which means MySQL scanned all rows in a given range.
      * ***Select Full Join*** is the number of joins that are not joined on an index, this is usually a huge performance hit.
    height: 250px
    id: 311
    legend:
    - as_table
    - min
    - max
    - avg
    - no_zero_series
    lines: true
    targets:
    - expr: rate(mysql_global_status_select_full_join[3m]) or irate(mysql_global_status_select_full_join[5m])
      legendFormat: Select Full Join
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_select_full_range_join[3m]) or irate(mysql_global_status_select_full_range_join[5m])
      legendFormat: Select Full Range Join
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_select_range[3m]) or irate(mysql_global_status_select_range[5m])
      legendFormat: Select Range
      refId: 3
      step: 1m
    - expr: rate(mysql_global_status_select_range_check[3m]) or irate(mysql_global_status_select_range_check[5m])
      legendFormat: Select Range Check
      refId: 4
      step: 1m
    - expr: rate(mysql_global_status_select_scan[3m]) or irate(mysql_global_status_select_scan[5m])
      legendFormat: Select Scan
      refId: 5
      step: 1m
    title: MySQL Select Types
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Sorts**

      Due to a query's structure, order, or other requirements, MySQL sorts the rows before returning them. For example, if a table is ordered 1 to 10 but you want the results reversed, MySQL then has to sort the rows to return 10 to 1.

      This graph also shows when sorts had to scan a whole table or a given range of a table in order to return the results and which could not have been sorted via an index.
    id: 30
    legend:
    - as_table
    - min
    - max
    - avg
    - no_zero_series
    lines: true
    targets:
    - expr: rate(mysql_global_status_sort_rows[3m]) or irate(mysql_global_status_sort_rows[5m])
      legendFormat: Sort Rows
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_sort_range[3m]) or irate(mysql_global_status_sort_range[5m])
      legendFormat: Sort Range
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_sort_merge_passes[3m]) or irate(mysql_global_status_sort_merge_passes[5m])
      legendFormat: Sort Merge Passes
      refId: 3
      step: 1m
    - expr: rate(mysql_global_status_sort_scan[3m]) or irate(mysql_global_status_sort_scan[5m])
      legendFormat: Sort Scan
      refId: 4
      step: 1m
    title: MySQL Sorts
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Slow Queries**

      Slow queries are defined as queries being slower than the long_query_time setting. For example, if you have long_query_time set to 3, all queries that take longer than 3 seconds to complete will show on this graph.
    id: 48
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_slow_queries[3m]) or irate(mysql_global_status_slow_queries[5m])
      legendFormat: Slow Queries
      refId: 1
      step: 1m
    title: MySQL Slow Queries
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **Aborted Connections**

      When a given host connects to MySQL and the connection is interrupted in the middle (for example due to bad credentials), MySQL keeps that info in a system table (since 5.6 this table is exposed in performance_schema).

      If the amount of failed requests without a successful connection reaches the value of max_connect_errors, mysqld assumes that something is wrong and blocks the host from further connection.

      To allow connections from that host again, you need to issue the ``FLUSH HOSTS`` statement.
    id: 47
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_aborted_connects[3m]) or irate(mysql_global_status_aborted_connects[5m])
      legendFormat: Aborted Connects (attempts)
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_aborted_clients[3m]) or irate(mysql_global_status_aborted_clients[5m])
      legendFormat: Aborted Clients (timeout)
      refId: 2
      step: 1m
    title: MySQL Aborted Connections
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **Table Locks**

      MySQL takes a number of different locks for varying reasons. In this graph we see how many Table level locks MySQL has requested from the storage engine. In the case of InnoDB, many times the locks could actually be row locks as it only takes table level locks in a few specific cases.

      It is most useful to compare Locks Immediate and Locks Waited. If Locks waited is rising, it means you have lock contention. Otherwise, Locks Immediate rising and falling is normal activity.
    id: 32
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_table_locks_immediate[3m]) or irate(mysql_global_status_table_locks_immediate[5m])
      legendFormat: Table Locks Immediate
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_table_locks_waited[3m]) or irate(mysql_global_status_table_locks_waited[5m])
      legendFormat: Table Locks Waited
      refId: 2
      step: 1m
    title: MySQL Table Locks
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Network Traffic**

      Here we can see how much network traffic is generated by MySQL. Outbound is network traffic sent from MySQL and Inbound is network traffic MySQL has received.
    id: 9
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    stack: true
    targets:
    - expr: rate(mysql_global_status_bytes_received[3m]) or irate(mysql_global_status_bytes_received[5m])
      legendFormat: Inbound
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_bytes_sent[3m]) or irate(mysql_global_status_bytes_sent[5m])
      legendFormat: Outbound
      refId: 2
      step: 1m
    title: MySQL Network Traffic
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - bars: true
    colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Network Usage Hourly**

      Here we can see how much network traffic is generated by MySQL per hour. You can use the bar graph to compare data sent by MySQL and data received by MySQL.
    height: 250px
    id: 381
    legend:
    - as_table
    - min
    - max
    - avg
    stack: true
    targets:
    - expr: increase(mysql_global_status_bytes_received[1h])
      legendFormat: Received
      refId: 1
      step: 1m
    - expr: increase(mysql_global_status_bytes_sent[1h])
      legendFormat: Sent
      refId: 2
      step: 1m
    title: MySQL Network Usage Hourly
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 0
    description: |-
      ***System Memory***: Total Memory for the system.\
      ***InnoDB Buffer Pool Data***: InnoDB maintains a storage area called the buffer pool for caching data and indexes in memory.\
      ***TokuDB Cache Size***: Similar in function to the InnoDB Buffer Pool,  TokuDB will allocate 50% of the installed RAM for its own cache.\
      ***Key Buffer Size***: Index blocks for MYISAM tables are buffered and are shared by all threads. key_buffer_size is the size of the buffer used for index blocks.\
      ***Adaptive Hash Index Size***: When InnoDB notices that some index values are being accessed very frequently, it builds a hash index for them in memory on top of B-Tree indexes.\
       ***Query Cache Size***: The query cache stores the text of a SELECT statement together with the corresponding result that was sent to the client. The query cache has huge scalability problems in that only one thread can do an operation in the query cache at the same time.\
      ***InnoDB Dictionary Size***: The data dictionary is InnoDB ‘s internal catalog of tables. InnoDB stores the data dictionary on disk, and loads entries into memory while the server is running.\
      ***InnoDB Log Buffer Size***: The MySQL InnoDB log buffer allows transactions to run without having to write the log to disk before the transactions commit.
    id: 50
    legend:
    - as_table
    - to_the_right
    - min
    - max
    - avg
    - no_null_series
    - no_zero_series
    lines: true
    stack: true
    targets:
    - expr: node_memory_MemTotal_bytes
      legendFormat: System Memory
      refId: 1
      step: 1m
    - expr: mysql_global_status_innodb_page_size * on (instance) mysql_global_status_buffer_pool_pages
      legendFormat: InnoDB Buffer Pool Data
      refId: 2
      step: 1m
    - expr: mysql_global_variables_innodb_log_buffer_size
      legendFormat: InnoDB Log Buffer Size
      refId: 3
      step: 1m
    - expr: mysql_global_variables_innodb_additional_mem_pool_size
      legendFormat: InnoDB Additional Memory Pool Size
      refId: 4
      step: 1m
    - expr: mysql_global_status_innodb_mem_dictionary
      legendFormat: InnoDB Dictionary Size
      refId: 5
      step: 1m
    - expr: mysql_global_variables_key_buffer_size
      legendFormat: Key Buffer Size
      refId: 6
      step: 1m
    - expr: mysql_global_variables_query_cache_size
      legendFormat: Query Cache Size
      refId: 7
      step: 1m
    - expr: mysql_global_status_innodb_mem_adaptive_hash
      legendFormat: Adaptive Hash Index Size
      refId: 8
      step: 1m
    - expr: mysql_global_variables_tokudb_cache_size
      legendFormat: TokuDB Cache Size
      refId: 9
      step: 1m
    title: MySQL Internal Memory Overview
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **Top Command Counters**

      The Com_{{xxx}} statement counter variables indicate the number of times each xxx statement has been executed. There is one status variable for each type of statement. For example, Com_delete and Com_update count [``DELETE``](https://dev.mysql.com/doc/refman/5.7/en/delete.html) and [``UPDATE``](https://dev.mysql.com/doc/refman/5.7/en/update.html) statements, respectively. Com_delete_multi and Com_update_multi are similar but apply to [``DELETE``](https://dev.mysql.com/doc/refman/5.7/en/delete.html) and [``UPDATE``](https://dev.mysql.com/doc/refman/5.7/en/update.html) statements that use multiple-table syntax.
    id: 14
    legend:
    - as_table
    - to_the_right
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: topk(5, rate(mysql_global_status_commands_total[3m])) or topk(5, irate(mysql_global_status_commands_total[5m]))
      legendFormat: Com_{{command}}
      refId: 1
      step: 1m
    title: Top Command Counters
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - bars: true
    colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **Top Command Counters Hourly**

      The Com_{{xxx}} statement counter variables indicate the number of times each xxx statement has been executed. There is one status variable for each type of statement. For example, Com_delete and Com_update count [``DELETE``](https://dev.mysql.com/doc/refman/5.7/en/delete.html) and [``UPDATE``](https://dev.mysql.com/doc/refman/5.7/en/update.html) statements, respectively. Com_delete_multi and Com_update_multi are similar but apply to [``DELETE``](https://dev.mysql.com/doc/refman/5.7/en/delete.html) and [``UPDATE``](https://dev.mysql.com/doc/refman/5.7/en/update.html) statements that use multiple-table syntax.
    id: 39
    legend:
    - as_table
    - to_the_right
    - min
    - max
    - avg
    stack: true
    targets:
    - expr: topk(5, increase(mysql_global_status_commands_total[1h]))
      legendFormat: Com_{{command}}
      refId: 1
      step: 1m
    title: Top Command Counters Hourly
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Handlers**

      Handler statistics are internal statistics on how MySQL is selecting, updating, inserting, and modifying rows, tables, and indexes.

      This is in fact the layer between the Storage Engine and MySQL.

      * `read_rnd_next` is incremented when the server performs a full table scan and this is a counter you don't really want to see with a high value.
      * `read_key` is incremented when a read is done with an index.
      * `read_next` is incremented when the storage engine is asked to 'read the next index entry'. A high value means a lot of index scans are being done.
    id: 8
    legend:
    - as_table
    - to_the_right
    - min
    - max
    - avg
    - no_zero_series
    lines: true
    targets:
    - expr: rate(mysql_global_status_handlers_total[3m]) or irate(mysql_global_status_handlers_total[5m])
      legendFormat: '{{handler}}'
      refId: 1
      step: 1m
    title: MySQL Handlers
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    id: 28
    legend:
    - as_table
    - to_the_right
    - min
    - max
    - avg
    - no_zero_series
    lines: true
    targets:
    - expr: rate(mysql_global_status_handlers_total[3m]) or irate(mysql_global_status_handlers_total[5m])
      legendFormat: '{{handler}}'
      refId: 1
      step: 1m
    title: MySQL Transaction Handlers
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    id: 40
    legend:
    - as_table
    - to_the_right
    - max
    - avg
    - no_zero_series
    lines: true
    targets:
    - expr: mysql_info_schema_threads
      legendFormat: '{{state}}'
      refId: 1
      step: 1m
    title: Process States
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - bars: true
    colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    id: 49
    legend:
    - as_table
    - to_the_right
    - max
    - avg
    - no_zero_series
    stack: true
    targets:
    - expr: topk(5, avg_over_time(mysql_info_schema_threads[1h]))
      legendFormat: '{{state}}'
      refId: 1
      step: 1m
    title: Top Process States Hourly
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Query Cache Memory**

      The query cache has huge scalability problems in that only one thread can do an operation in the query cache at the same time. This serialization is true not only for SELECTs, but also for INSERT/UPDATE/DELETE.

      This also means that the larger the `query_cache_size` is set to, the slower those operations become. In concurrent environments, the MySQL Query Cache quickly becomes a contention point, decreasing performance. MariaDB and AWS Aurora have done work to try and eliminate the query cache contention in their flavors of MySQL, while MySQL 8.0 has eliminated the query cache feature.

      The recommended settings for most environments is to set:
        ``query_cache_type=0``
        ``query_cache_size=0``

      Note that while you can dynamically change these values, to completely remove the contention point you have to restart the database.
    id: 46
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: mysql_global_status_qcache_free_memory
      legendFormat: Free Memory
      refId: 1
      step: 1m
    - expr: mysql_global_variables_query_cache_size
      legendFormat: Query Cache Size
      refId: 2
      step: 1m
    title: MySQL Query Cache Memory
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Query Cache Activity**

      The query cache has huge scalability problems in that only one thread can do an operation in the query cache at the same time. This serialization is true not only for SELECTs, but also for INSERT/UPDATE/DELETE.

      This also means that the larger the `query_cache_size` is set to, the slower those operations become. In concurrent environments, the MySQL Query Cache quickly becomes a contention point, decreasing performance. MariaDB and AWS Aurora have done work to try and eliminate the query cache contention in their flavors of MySQL, while MySQL 8.0 has eliminated the query cache feature.

      The recommended settings for most environments is to set:
      ``query_cache_type=0``
      ``query_cache_size=0``

      Note that while you can dynamically change these values, to completely remove the contention point you have to restart the database.
    height: ""
    id: 45
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_qcache_hits[3m]) or irate(mysql_global_status_qcache_hits[5m])
      legendFormat: Hits
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_qcache_inserts[3m]) or irate(mysql_global_status_qcache_inserts[5m])
      legendFormat: Inserts
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_qcache_not_cached[3m]) or irate(mysql_global_status_qcache_not_cached[5m])
      legendFormat: Not Cached
      refId: 3
      step: 1m
    - expr: rate(mysql_global_status_qcache_lowmem_prunes[3m]) or irate(mysql_global_status_qcache_lowmem_prunes[5m])
      legendFormat: Prunes
      refId: 4
      step: 1m
    - expr: mysql_global_status_qcache_queries_in_cache
      legendFormat: Queries in Cache
      refId: 5
      step: 1m
    title: MySQL Query Cache Activity
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    id: 43
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_opened_files[3m]) or irate(mysql_global_status_opened_files[5m])
      legendFormat: Openings
      refId: 1
      step: 1m
    title: MySQL File Openings
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    id: 41
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: mysql_global_status_open_files
      legendFormat: Open Files
      refId: 1
      step: 1m
    - expr: mysql_global_variables_open_files_limit
      legendFormat: Open Files Limit
      refId: 2
      step: 1m
    - expr: mysql_global_status_innodb_num_open_files
      legendFormat: InnoDB Open Files
      refId: 3
      step: 1m
    title: MySQL Open Files
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Table Open Cache Status**

      The recommendation is to set the `table_open_cache_instances` to a loose correlation to virtual CPUs, keeping in mind that more instances means the cache is split more times. If you have a cache set to 500 but it has 10 instances, each cache will only have 50 cached.

      The `table_definition_cache` and `table_open_cache` can be left as default as they are auto-sized MySQL 5.6 and above (ie: do not set them to any value).
    id: 44
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: rate(mysql_global_status_opened_tables[3m]) or irate(mysql_global_status_opened_tables[5m])
      legendFormat: Openings
      refId: 1
      step: 1m
    - expr: rate(mysql_global_status_table_open_cache_hits[3m]) or irate(mysql_global_status_table_open_cache_hits[5m])
      legendFormat: Hits
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_table_open_cache_misses[3m]) or irate(mysql_global_status_table_open_cache_misses[5m])
      legendFormat: Misses
      refId: 3
      step: 1m
    - expr: rate(mysql_global_status_table_open_cache_overflows[3m]) or irate(mysql_global_status_table_open_cache_overflows[5m])
      legendFormat: Misses due to Overflows
      refId: 4
      step: 1m
    - expr: (rate(mysql_global_status_table_open_cache_hits[3m]) or irate(mysql_global_status_table_open_cache_hits[5m]))/((rate(mysql_global_status_table_open_cache_hits[3m])
        or irate(mysql_global_status_table_open_cache_hits[5m]))+(rate(mysql_global_status_table_open_cache_misses[3m])
        or irate(mysql_global_status_table_open_cache_misses[5m])))
      legendFormat: Table Open Cache Hit Ratio
      refId: 5
      step: 1m
    title: MySQL Table Open Cache Status
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Open Tables**

      The recommendation is to set the `table_open_cache_instances` to a loose correlation to virtual CPUs, keeping in mind that more instances means the cache is split more times. If you have a cache set to 500 but it has 10 instances, each cache will only have 50 cached.

      The `table_definition_cache` and `table_open_cache` can be left as default as they are auto-sized MySQL 5.6 and above (ie: do not set them to any value).
    id: 42
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: mysql_global_status_open_tables
      legendFormat: Open Tables
      refId: 1
      step: 1m
    - expr: mysql_global_variables_table_open_cache
      legendFormat: Table Open Cache
      refId: 2
      step: 1m
    title: MySQL Open Tables
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    description: |-
      **MySQL Table Definition Cache**

      The recommendation is to set the `table_open_cache_instances` to a loose correlation to virtual CPUs, keeping in mind that more instances means the cache is split more times. If you have a cache set to 500 but it has 10 instances, each cache will only have 50 cached.

      The `table_definition_cache` and `table_open_cache` can be left as default as they are auto-sized MySQL 5.6 and above (ie: do not set them to any value).
    id: 54
    legend:
    - as_table
    - min
    - max
    - avg
    lines: true
    targets:
    - expr: mysql_global_status_open_table_definitions
      legendFormat: Open Table Definitions
      refId: 1
      step: 1m
    - expr: mysql_global_variables_table_definition_cache
      legendFormat: Table Definitions Cache Size
      refId: 2
      step: 1m
    - expr: rate(mysql_global_status_opened_table_definitions[3m]) or irate(mysql_global_status_opened_table_definitions[5m])
      legendFormat: Opened Table Definitions
      refId: 3
      step: 1m
    title: MySQL Table Definition Cache
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    id: 31
    legend:
    - avg
    lines: true
    targets:
    - expr: rate(node_vmstat_pgpgin[3m]) * 1024 or irate(node_vmstat_pgpgin[5m]) *
        1024
      legendFormat: Page In
      refId: 1
      step: 1m
    - expr: rate(node_vmstat_pgpgout[3m]) * 1024 or irate(node_vmstat_pgpgout[5m])
        * 1024
      legendFormat: Page Out
      refId: 2
      step: 1m
    title: I/O Activity
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    height: 250px
    id: 37
    legend:
    - avg
    lines: true
    stack: true
    targets:
    - expr: node_memory_MemTotal_bytes - (node_memory_MemFree_bytes + node_memory_Buffers
        + node_memory_Cached)
      legendFormat: Used
      refId: 1
      step: 1m
    - expr: node_memory_MemFree_bytes
      legendFormat: Free
      refId: 2
      step: 1m
    - expr: node_memory_Buffers
      legendFormat: Buffers
      refId: 3
      step: 1m
    - expr: node_memory_Cached
      legendFormat: Cached
      refId: 4
      step: 1m
    title: Memory Distribution
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    height: ""
    id: 2
    legend:
    - avg
    - no_null_series
    - no_zero_series
    lines: true
    stack: true
    targets:
    - expr: clamp_max(((avg by (mode) ( (clamp_max(rate(node_cpu_seconds_total[3m]),1))
        or (clamp_max(irate(node_cpu_seconds_total[5m]),1)) ))*100 or (avg_over_time(node_cpu_seconds_total_average[3m])
        or avg_over_time(node_cpu_seconds_total_average[5m]))),100)
      legendFormat: '{{mode}}'
      refId: 1
      step: 1m
    - expr: clamp_max(max by () (sum  by (cpu) ( (clamp_max(rate(node_cpu_seconds_total[3m]),1))
        or (clamp_max(irate(node_cpu_seconds_total[5m]),1)) ))*100,100)
      legendFormat: Max Core Utilization
      refId: 2
      step: 1m
    - expr: node_load1
      legendFormat: Load 1m
      refId: 3
      step: 1m
    title: CPU Usage / Load
    type: graph
    xaxis: {}
    yaxes:
    - decimals: 1
      format: percent (0.0-1.0)
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    decimals: 2
    height: 250px
    id: 36
    legend:
    - avg
    - no_null_series
    - no_zero_series
    targets:
    - expr: |-
        sum((rate(node_disk_read_time_seconds_total[3m]) / rate(node_disk_reads_completed_total[3m])) or (irate(node_disk_read_time_seconds_total[5m]) / irate(node_disk_reads_completed_total[5m]))
        or avg_over_time(aws_rds_read_latency_average[3m]) or avg_over_time(aws_rds_read_latency_average[5m]))
      legendFormat: Read
      refId: 1
      step: 1m
    - expr: "sum((rate(node_disk_write_time_seconds_total[3m]) / rate(node_disk_writes_completed_total[3m]))
        or (irate(node_disk_write_time_seconds_total[5m]) / irate(node_disk_writes_completed_total[5m]))
        or \navg_over_time(aws_rds_write_latency_average[3m]) or avg_over_time(aws_rds_write_latency_average[5m]))"
      legendFormat: Write
      refId: 2
      step: 1m
    title: Disk Latency
    type: graph
    xaxis: {}
    yaxes:
    - format: none
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    height: 250px
    id: 21
    legend:
    - avg
    lines: true
    targets:
    - expr: 'sum(rate(node_network_receive_bytes_total[3m])) or sum(irate(node_network_receive_bytes_total[5m]))
        or sum(max_over_time(rdsosmetrics_network_rx[3m])) or sum(max_over_time(rdsosmetrics_network_rx[5m])) '
      legendFormat: Inbound
      refId: 1
      step: 1m
    - expr: |-
        sum(rate(node_network_transmit_bytes_total[3m])) or sum(irate(node_network_transmit_bytes_total[5m])) or
        sum(max_over_time(rdsosmetrics_network_tx[3m])) or sum(max_over_time(rdsosmetrics_network_tx[5m]))
      legendFormat: Outbound
      refId: 2
      step: 1m
    title: Network Traffic
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  - colors:
    - '#60acfc'
    - '#23c2db'
    - '#64d5b2'
    - '#d5ec5a'
    - '#ffb64e'
    - '#fb816d'
    - '#d15c7f'
    datasource: ${DS_PROMETHEUS}
    id: 38
    legend:
    - avg
    lines: true
    targets:
    - expr: rate(node_vmstat_pswpin[3m]) * 4096 or irate(node_vmstat_pswpin[5m]) *
        4096
      legendFormat: Swap In (Reads)
      refId: 1
      step: 1m
    - expr: rate(node_vmstat_pswpout[3m]) * 4096 or irate(node_vmstat_pswpout[5m])
        * 4096
      legendFormat: Swap Out (Writes)
      refId: 2
      step: 1m
    title: Swap Activity
    type: graph
    xaxis: {}
    yaxes:
    - format: Byte
  tags:
  - Percona
  - MySQL
  templatings:
  - default: $__auto_interval_interval
    label: Interval
    name: interval
    type: interval
    values:
    - $__auto_interval_interval
    - 1s
    - 5s
    - 1m
    - 5m
    - 1h
    - 6h
    - 1d
  - datasource: ${DS_PROMETHEUS}
    label: Host
    name: host
    request: label_values(mysql_up, instance)
    type: query
  time:
    from: now-12h
    to: now
  timezone: browser
  title: MySQL Overview
